steps 23 > 24:
cat the cron file
create temp directory
create script to cat /etc/bandit_pass/bandit24 > /tmp/tmp.adadas/password
give permissions rwx to files and temp dir
cp the script to the dir in cron file
and wait for cat to password
cat password


22 > 23 : 0Zf11ioIjMVN551jX3CmStKLYqjk54Ga
once again cro job that we had to follow with mostly cat and ls


21 > 22 : tRae0UfB9v0UzbCdn9cY0gQnds9GF58Q
a program was running regurlarly with cron, i just had to cat the file in
/etc/cron.d/ and follow where the script was being posted
once i found, i cat the file and obtained the password


20 > 21 : EeoULMCra2q0dSkYj561DX7s1CpBuOBt
for this level i had to connect to my own network daemon with:
nc -l <port>  ==> nc -l 12345
and in another terminal, bandit20 had a setuid binary which we had to use to
connect to our daemon, and it was waiting for the current level pw to be introduced
and we received the setuid binary returned the next level pw
the command used to connect the setuid binary, was:
./suconnect <port> ==> ./suconnect 12345


19 > 20 : 0qXahG8ZjOVMN9Ghs7iOWsCfZyXOUbYO
the password for the next level is stored in /etc/bandit_pass
but bandit19 is denied access to the file, we have a setuid binary 
which we can execute with a cat command after to read the file as 
bandit20, without being that user


18 > 19 : cGWpMaKXVwDUNgPAVJbWYuGHVn9zl3j8
in this level .bashrc is configured to log us when we try to log in
with ssh, however we know that the pw is stored in a readme in the 
homedirectory, so we can just use
ssh bandit18@bandit.labs.overthewrire.org -p 2220 cat readme
and it'll return the pw stored without establishing a connection


17 > 18: x2gLTTjFwMOhQ8oWNbMN362QKxfRqGlO
pw was the only line modified between pw.old and pw.new so i used diff


16 > 17 : sshkey.private
for this level we had to scan the ports of localhost to find out which port
was running ssl service, 2 ports were returned, one of which was running the 
echo service only and the second one is running an unknown service, so
second one seems to be the right one
we then just have to connect to that port on localhost and send current pw to
receive the private ssh key we then connect using:
ssh -i <file> <user>@<service>


15 > 16 : kSkvUpMQ7lBYyCM4GBPvCvT1BfWRy0Dx
for this level we needed to submit the level 15 password to port 30001 on 
localhost using SSL/TLS encryption, for that i used:
openssl s_client localhost:30001
openssl s_client to establish a connection to a remote server
we enter the password after all the connection info and the next level pw
is returned


15 : 8xCjnmgoKbGLhHFAZlGE5Tmu4M2tKJQo
connected to port 30000 of localhost to obtain password for level 15
used: nc localhost 30000
and pasted level 14 password and pw for level 15 was returned

14 : MU4VWeTyJk8ROof1qqmcBPaLh7lDCPvS
password obtained by accessing etc/bandit_pass/bandit14


second password is correct for level 1
13 > 14 : no password is needed, we had a file with a ssh key to log into 
the next level bandit14, the line used was:
ssh -i sshkey.private bandit14@bandit.labs.overthewire.org -p 2220


12 > 13: FO5dwFsc0cbaIiH0h8J2eUks2vdTDwAn
took a while to figure this one out but in the end it was pretty simple
just had to decompress/revert the file until got the password
used xxd, tar, gzip, bzip2 and file


11 > 12 : 7x16WNeHIi5YkIhWsfFIqoognUTyj9Q4
a bit harder, had to rotate the characters by 13 letters, for that i used:
cat data.txt | tr '[A-Za-z]' 'N-ZA-Mn-za-m]'
cat data.txt to display the text alongside with
tr '[A-Za-z]' '[N-ZA-Mn-za-m]' to translate using all ch from 'A' to 'Z' and
'a' to 'z' plus decode from 13th letter (n) going from 'N' to end of alphabet
'Z' continuing with 'A' to 13th - 1 letter 'M' and same for small caps
'n-za-m' 


10 > 11: dtR173fZKb0RRsDFSGsg2RWnpNVj3qRr
this one was simple, used base64 -d data.txt


9 > 10: FGUW5ilLVJrxX9kMYMmlN4MgbpfMiqey
for this level i used the strings command with grep
strings to print readable characters and grep to get the ===== before the pw


8 > 9: 4CKMh1JI91bUIZZPXDqGanal4xvAg0JM
sort data.txt | uniq -u
uniq -u to find non duplicated lines, but we must sort data.txt first
because uniq only checks for **consecutive** duplicated lines


7 > 8 : dfwvzFQi4mU0wfNbFOe9RoWskMLg7eEc
grep -i 'millionth' data.txt
to find the password next to the word 'millionth'


6 > 7 : morbNTDkSW6jIlUc0ymOdMaLnOlFVAaj
find / -user bandit7 -group bandit6 -size 33c 2>/dev/null



file is human-readable, 1033 bytes and not executable
find ./inhere -type f -size 1033c
seatch for type files of exactly 1033 bytes
5: HWasnPhtq9AVKe0dmk45nxy20cvUa6EG

4: 4oQYVPkxZOOEOO5pTW81FB8j8lxXGUQw

file is hiden in ./ folder
pw 3 > 4: 2WmrDFRmJIq3IPxneAaMGhap0pFhF3NJ


pw 0 > 1: ZjLjTmM6FvvyRnrb2rfNWOZOTa6ip5If

since the file is called "-", in order to use cat and it not think that it's 
an argument, we must specify the full location: cat ./-
result: pw 1 > 2 263JGJPfgU6LtdEvgfWU1XP5yac29mFx

file is has spaces, so we use '' to call it
pw 2 > 3 MNk8KNH3Usiio41PRUEoDFPqfxLPlSmx
